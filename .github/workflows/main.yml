# This is a basic workflow to help you get started with Actions

name: Unittests

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This workflow contains a single job called "build"
  build:
    environment: Master
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Generate env vars from gh secrets
        run: |  
          echo TEMPLATE_ROOT_DIR=${{ secrets.TEMPLATE_ROOT_DIR }} >> .env
          echo FAUNA_SECRET=${{ secrets.FAUNA_SECRET }}  >> .env
          echo FAUNA_SCHEME=${{ secrets.FAUNA_SCHEME }} >> .env
          echo FAUNA_DOMAIN=${{ secrets.FAUNA_DOMAIN }} >> .env
          echo FAUNA_PORT=${{ secrets.FAUNA_PORT}} >> .env
          echo FAUNA_GRAPHQL_IMPORT_URL=${{ secrets.FAUNA_GRAPHQL_IMPORT_URL}} >> .env
          echo FAUNA_GRAPHQL_URL=$${{ secrets.FAUNA_GRAPHQL_URL }} >> .env
          echo DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }} >> .env
          echo PROJECT_NAME=${{ secrets.PROJECT_NAME }} >> .env
          echo KEY_MODULE=${{ secrets.KEY_MODULE }}  >> .env
          cat .env
      - run: docker-compose pull

      # In this step, this action saves a list of existing images,
      # the cache is created without them in the post run.
      # It also restores the cache if it exists.
      - uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true

      - run: docker volume create --name=pfunk-fauna-data
      - run: docker-compose build

      # Runs a single command using the runners shell
      - name: Run Unit Tests
        run: docker-compose run web poetry run python -m unittest
      - name: Build and publish to pypi
        if: github.ref == 'refs/heads/master'
        uses: JRubics/poetry-publish@v1.13
        with:
          pypi_token: ${{ secrets.PYPI_TOKEN }}
          ignore_dev_requirements: "yes"